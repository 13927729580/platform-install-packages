user  kaltura;
worker_processes  auto;

error_log  @LOG_DIR@/kaltura_nginx_errors.log;

pid		/var/run/nginx.pid;

events {
	worker_connections  1024;
	multi_accept on;
	use epoll;
}

http {
	upstream kalapi {
		server @WWW_HOST@;
	}
		
	include	   mime.types;
	default_type  application/octet-stream;

	log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
		'$status $bytes_sent $request_time "$http_referer" "$http_user_agent" "-" - '
		'"$sent_http_x_kaltura" "$http_host" $pid $sent_http_x_kaltura_session - '
		'$request_length "$sent_http_content_range" "$http_x_forwarded_for" '
		'"$http_x_forwarded_server" "$http_x_forwarded_host" "$sent_http_cache_control" '
		'$connection ';

	access_log @LOG_DIR@/kaltura_nginx_access.log main;

	sendfile on;
	tcp_nopush on;
	tcp_nodelay on;

	keepalive_timeout 60;
	keepalive_requests 1000;
	client_header_timeout 20;
	client_body_timeout 20;
	reset_timedout_connection on;
	send_timeout 20;

	gzip  on;
	gzip_types application/vnd.apple.mpegurl video/f4m application/dash+xml text/xml;
	# common vod settings
	vod_mode mapped;
	vod_upstream_location /kalapi_proxy;
	vod_upstream_extra_args "pathOnly=1";

	# shared memory zones
	vod_metadata_cache metadata_cache 512m;
	vod_mapping_cache mapping_cache 64m;
	vod_response_cache response_cache 64m;
	vod_performance_counters perf_counters;

	# common file caching / aio
	open_file_cache max=1000 inactive=5m;
	open_file_cache_valid 2m;
	open_file_cache_min_uses 1;
	open_file_cache_errors on;
	aio on;

	server {
		listen @VOD_PACKAGER_PORT@;
		server_name @VOD_PACKAGER_HOST@;
		include /etc/nginx/conf.d/live.conf;
		include /etc/nginx/conf.d/kaltura.conf;

	}
	include /etc/nginx/conf.d/ssl.conf;
}
# RTMP configuration
rtmp {
    server {
        listen @RTMP_PORT@; # Listen on standard RTMP port
        chunk_size 4000;

        # This application is to accept incoming stream
        application kLive {
                live on; # Allows live input from above

            	# ADAPTIVE BITRATE SUPPORT 
		# Once the stream is alive, transcode for adaptive streaming
            	# This single ffmpeg command takes the input and transforms
            	# the source into 4 different streams with different bitrate
            	# and quality. The scaling done here respects the aspect
            	# ratio of the input.

		# This is commented by default as it is CPU and RAM intensive 
		# If you opt to enable it, ensure you have sufficient resources.

            	#exec /opt/kaltura/bin/ffmpeg -i rtmp://@VOD_PACKAGER_HOST@:@RTMP_PORT@/$app/$name -async 1 -vsync -1
                #        -c:v libx264 -b:v 256k -b:a 32k -vf "scale=480:trunc(ow/a/2)*2" -tune zerolatency -preset veryfast -crf 23 -f flv rtmp://@VOD_PACKAGER_HOST@:@RTMP_PORT@/kLive/$name_low
                #        -c:v libx264 -b:v 768k -b:a 96k -vf "scale=720:trunc(ow/a/2)*2" -tune zerolatency -preset veryfast -crf 23 -f flv rtmp://@VOD_PACKAGER_HOST@:@RTMP_PORT@/kLive/$name_mid
                #        -c:v libx264 -b:v 1024k -b:a 128k -vf "scale=960:trunc(ow/a/2)*2" -tune zerolatency -preset veryfast -crf 23 -f flv rtmp://@VOD_PACKAGER_HOST@:@RTMP_PORT@/kLive/$name_high
                #        -c:v libx264 -b:v 1920k -b:a 128k -vf "scale=1280:trunc(ow/a/2)*2" -tune zerolatency -preset veryfast -crf 23 -f flv rtmp://@VOD_PACKAGER_HOST@:@RTMP_PORT@/kLive/$name_hd720
                #        -c copy -f flv rtmp://@VOD_PACKAGER_HOST@:@RTMP_PORT@/kLive/$name_src;

                dash on;
                dash_path /var/tmp/dashme;

                hls on; # Enable HTTP Live Streaming
            	# Instruct clients to adjust resolution according to bandwidth
            	hls_variant _low BANDWIDTH=288000; # Low bitrate, sub-SD resolution
            	hls_variant _mid BANDWIDTH=448000; # Medium bitrate, SD resolution
            	hls_variant _high BANDWIDTH=1152000; # High bitrate, higher-than-SD resolution
            	hls_variant _hd720 BANDWIDTH=2048000; # High bitrate, HD 720p resolution
            	hls_variant _src BANDWIDTH=4096000; # Source bitrate, source resolution

                hls_cleanup on;
                hls_sync 100ms;
                hls_fragment 2s;
		hls_playlist_length 300m;
                hls_path /var/tmp/hlsme/;

                # Enable recording archived files of each stream
                record all;
                # This does not need to be publicly accessible since we'll convert and publish the files later
                record_path /var/tmp/rec;
                record_suffix _%Y-%m-%d_%H-%M-%S.flv;
                record_lock on;

                # Define the two scripts that will run when recording starts and when it finishes
                exec_publish /opt/kaltura/bin/create_live_entry.php $args;
                exec_record_done /opt/kaltura/bin/upload_live_recording.php $args $path;


        }
    }
}

